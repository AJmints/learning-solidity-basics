SET UP
*Since we have many of the dependencies already installed from hardhat-simple-storage and Foundations, we don't need to worry about installing too much

First we run...
npx hardhat

**Added a new package for solhint...
npm install -g solhint (version 3.6.2)

Once we have our contracts imported/created, we would compile them with the command...
npx hardhat compile

Might need 
npm install -D hardhat-deploy
npm install -D hardhat-deploy-ethers

then in our package.json we have to override under devDependencies...
"@nomiclabs/hardhat-ethers": "npm:hardhat-deploy-ethers",


MOCKS

What is mocking?
Answer from stack overflow:
Mocking is primarily used in unit testing. An object under test may have dependencies on other (complex) objects. To isolate
the behavior of the object you want to replace the other objects by mocks that simulate the behavior of the real objects. 
This is useful if the real objects are impractical to incorporate into the unit test.

In short, mocking is creating objects that simulate the behavior of real objects.


SETUP FOR LOCAL testing

View the contracts/test folder to see the setup for our mock solidity contract
To see how we set up our MockV3Aggregator.sol, view the notes in the contracts/deploy/00-deploy-mocks.ts

We also set up helper-hardhat-config.ts as well as our 01-deploy-fund-me.ts file


DEPLOYING

In our deploy folder, we have to set up our convention with a number system for hardhat to understand and read our files. The 
file that starts with 00 will hold our mock files that have methods to support our other contracts we want to deploy. In our case
00 has our AggregatorV3Interface mock that we need to support the FundMe contract since we have to reference a live feed for value
pairs that the chainlink oracle will give us.
We can then add tags to our deploy scripts to selectivly run them when we are testing with our deploy command in the terminal

If everything is set up properly, we can run some lines in termial to see if the code runs properly

To test if our mocks are working fine, we can target the deploy script with the tag "mock" by running....
npx hardhat deploy --tags mocks

If that runs okay, then we can then test all our contracts deployments by entering...
npx hardhat deploy

If that runs fine then we are now set up to run our local environment by running...
npx hardhat node

We need some contracts to reference on our local node, and by setting up our deploy scripts, we now have our contracts set up to 
test in a local environment!


UTILS

Set up our verify script when we go to test this on a real testnet, we are able to verify our contracts.


DEPLOY AND verify

npx hardhat deploy --network sepolia
npx hardhat deploy --network mumbai

All should go well


NATSPEC

NatSpec is declared at the top of our contract to share details of our contract to other developers.

solc has a developer documentation generator that uses the comments set up in our FundMe.sol that use the NatSpec format.
If solc is installed, to use this generator run...
socl --userdoc --devdoc FundMe.sol


TESTING

Unit test are done locally
Staging test can be done on a testnet (The last stop before mainnet)

Unit
- local hardhat network || forked hardhat network (Learn about forked later)

An order to work on your testing is in order of your testable functions in your contract by their order. 
In our case with Fundme, Our order would look something like...

constructor
receive
fallback
fund
withdraw

This is because this is the order of our functions in our contract.

When we import deployments into our FundMe.test, we have access to some new testing methods. 
.fixture(["all"]) uses our tags in our deploy scripts

Bad news...

Testing went off the rails. None of the test behaved like the video. I am using different versions and not sure
if there are other factors at play, but for now I am going to skip the unit testing here and revist this later 
on when I am writting real contracts for myself and explore them then.


LEARN ABOUT MEMORY

STORAGE IN SOLIDITY


Storage variables that live inside a contract cost gas. These variables are able to change state and therefor, cost more gas. Storage variables are saved as hexidecimal values. Dynamic variables, like a dynamic array or mapping, that can change length, elements inside the array are saved as a type of hashing function (see documentation). The object saved in the storage slot will have access to the contents of the array, but it stores the length of the array. If we are using an empty array to hold a storage slot, then push a uint256 item into it, it will then be saved into storage slot as the value. This is a topic that is above the scope of my understanding without futher investigation. 

Moving onto constants and immutable variables don't take up space in storage. These items are saved into the contracts bytecode itself.

There is storage space, but there is also memory, which is used for variables in a function. They only need to exist during a fuctions runtime, so stating memory on a variable will save on gas. More on this soon.

When optimizing our solidity contracts, going through the global variables that live on a contract and identifying the variable name with how it being stored is the proper convention. 

Examples: 

Storage variables
uint256 public s_variableName;
uint256[] private s_arrayName;

Immutable variables 
uint256 public immutable i_variableName;
uint256[] private immutable i_arrayName;

Constant variables
uint256 public constant VARIABLE_NAME;
uint256[] private constant ARRAY_NAME;

When you use the memory keyword, you are now saving the relevant information in the memory, so when you continue to access/use that memory, it is available and cost much less gas to access/use. (saved a different way to use much less gas) 
NOTE: mappings can't be in memory

Using the function below as an example, memory is being used to handle all the computation with the required information, but before making any changes to the variable in storage, we are competing the computation before writting it to storage. As a result, we are saving gas.
Example: 
function cheaperWithdraw() public payable onlyOwner {
        address[] memory funders = s_funders;
        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) { 
            address funder = funders[funderIndex];
            s_addressToAmountFunded[funder] = 0;
        }
        s_funders = new address[](0);
        (bool success, ) = i_owner.call{value: address(this).balance}("");
        require(success);
    }

The savings are pretty minimal with this particular case, but it is a valid way to think about gas optimization. 