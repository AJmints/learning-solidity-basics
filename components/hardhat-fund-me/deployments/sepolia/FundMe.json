{
  "address": "0x824F1e16406e1e056bD6e988C2553e22D5EEDf96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xde863130c6cb474f0838902deab00c6226e17f3f53f4d0c6d816f886c06e1f93",
  "receipt": {
    "to": null,
    "from": "0x3c85b98268b8Dd6555aeC3fb1C7d19bbd88f8B46",
    "contractAddress": "0x824F1e16406e1e056bD6e988C2553e22D5EEDf96",
    "transactionIndex": 14,
    "gasUsed": "995960",
    "logsBloom": "0x
    "blockHash": "0x347605efee82f70bb2871bf71764ad0ec7d5f67aaddebdefdcf069c819139b26",
    "transactionHash": "0xde863130c6cb474f0838902deab00c6226e17f3f53f4d0c6d816f886c06e1f93",
    "logs": [],
    "blockNumber": 4687735,
    "cumulativeGasUsed": "2265469",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "0aad752f53afd14e2c9f75825dfb4f23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"author name\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This contract funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Pragma\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// Imports\\r\\nimport './PriceConverter.sol';\\r\\n\\r\\n// Errors\\r\\n/* Convention for error throwing is ContractName__ErrorName  */\\r\\nerror FundMe__NotOwner(); \\r\\nerror FundMe__CallFailed();\\r\\n\\r\\n// Interfaces\\r\\n\\r\\n// Libraries\\r\\n\\r\\n/* NatSpec setup - Look up if unsure, also check Doxygen. Comment setup is as seen below. View Learning.txt in this folder to see how to use solc to generate our docs */\\r\\n/** @title A contract for crowd funding\\r\\n *  @author author name\\r\\n *  @notice This contract is to demo a sample funding contract\\r\\n *  @dev This implements price feeds as our library\\r\\n */\\r\\n\\r\\n// Contracts\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State Variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    address private immutable i_owner;\\r\\n    /* Updated constructor, added this new variable, and refactored PriceConverter to adapt to any chain we are on */\\r\\n    /* This variable uses the AggregatorV3Interface to make our contract variable and modularized for the chain we are connected to */\\r\\n    AggregatorV3Interface public s_priceFeed;\\r\\n\\r\\n    // Events - None on this contract\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner {\\r\\n        if (msg.sender != i_owner) { revert FundMe__NotOwner(); }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions\\r\\n    // Function Order:\\r\\n    // Constructor\\r\\n    // Receive\\r\\n    // Fallback\\r\\n    // External\\r\\n    // Public \\r\\n    // Internal\\r\\n    // Private\\r\\n    // view / pure\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    // You can leave natspec notes over functions and various parts of your contract to inform others if anything needs clarification. \\r\\n    /** \\r\\n     * @notice This contract funds this contract\\r\\n     */\\r\\n    function fund() public payable{\\r\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"Didn't send enough!\\\");\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] = msg.value; \\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) { \\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!callSuccess) { revert FundMe__CallFailed(); }\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) { \\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n    \\r\\n\\r\\n    // Getters\\r\\n\\r\\n    function getOwner() public view returns(address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n    \\r\\n    function getFunder(uint256 index) public view returns(address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n    \\r\\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256) {\\r\\n            return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdd07d7f356b06d9dd00393d3ddcd6ece8360805d27c6d8ddb5b6c0ba1f76aa32\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\r\\n\\r\\nlibrary PriceConverter {\\r\\n\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x8898dc03b061b7dcf460343f8468f3d0032e8a71290c005d7ddb72425a5ea427\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200122a3803806200122a8339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6110a4620001866000396000818161024001528181610486015281816105ff01526107f501526110a46000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610abe565b6101cf565b6040516100bf9190610c71565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610c36565b60405180910390f35b6100fb61023e565b005b34801561010957600080fd5b50610112610475565b60405161011f9190610c71565b60405180910390f35b34801561013457600080fd5b5061013d610482565b60405161014a9190610c1b565b60405180910390f35b34801561015f57600080fd5b506101686104aa565b6040516101759190610c36565b60405180910390f35b6101866104d4565b005b6101906105fd565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610aeb565b61088b565b6040516101c69190610c1b565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561036e5760008082815481106102e8576102e7610f83565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036690610edc565b9150506102c6565b50600067ffffffffffffffff81111561038a57610389610fb2565b5b6040519080825280602002602001820160405280156103b85781602001602082028036833780820191505090505b50600090805190602001906103ce9291906109ae565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f590610c06565b60006040518083038185875af1925050503d8060008114610432576040519150601f19603f3d011682016040523d82523d6000602084013e610437565b606091505b5050905080610472576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610513600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d290919063ffffffff16565b1015610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b90610c51565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610682576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561070557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106bb575b5050505050905060005b815181101561079057600082828151811061072d5761072c610f83565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078890610edc565b91505061070f565b50600067ffffffffffffffff8111156107ac576107ab610fb2565b5b6040519080825280602002602001820160405280156107da5781602001602082028036833780820191505090505b50600090805190602001906107f09291906109ae565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161083790610c06565b60006040518083038185875af1925050503d8060008114610874576040519150601f19603f3d011682016040523d82523d6000602084013e610879565b606091505b505090508061088757600080fd5b5050565b60008082815481106108a05761089f610f83565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108de8361090e565b90506000670de0b6b3a764000085836108f79190610df0565b6109019190610ca8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f9190610b18565b5050509150506402540be400816109a69190610cd9565b915050919050565b828054828255906000526020600020908101928215610a27579160200282015b82811115610a265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ce565b5b509050610a349190610a38565b5090565b5b80821115610a51576000816000905550600101610a39565b5090565b600081359050610a6481611012565b92915050565b600081519050610a7981611029565b92915050565b600081359050610a8e81611040565b92915050565b600081519050610aa381611040565b92915050565b600081519050610ab881611057565b92915050565b600060208284031215610ad457610ad3610fe1565b5b6000610ae284828501610a55565b91505092915050565b600060208284031215610b0157610b00610fe1565b5b6000610b0f84828501610a7f565b91505092915050565b600080600080600060a08688031215610b3457610b33610fe1565b5b6000610b4288828901610aa9565b9550506020610b5388828901610a6a565b9450506040610b6488828901610a94565b9350506060610b7588828901610a94565b9250506080610b8688828901610aa9565b9150509295509295909350565b610b9c81610e4a565b82525050565b610bab81610ea6565b82525050565b6000610bbe600083610c8c565b9150610bc982610fe6565b600082019050919050565b6000610be1601383610c97565b9150610bec82610fe9565b602082019050919050565b610c0081610e86565b82525050565b6000610c1182610bb1565b9150819050919050565b6000602082019050610c306000830184610b93565b92915050565b6000602082019050610c4b6000830184610ba2565b92915050565b60006020820190508181036000830152610c6a81610bd4565b9050919050565b6000602082019050610c866000830184610bf7565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cb382610e86565b9150610cbe83610e86565b925082610cce57610ccd610f54565b5b828204905092915050565b6000610ce482610e5c565b9150610cef83610e5c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d2e57610d2d610f25565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d6b57610d6a610f25565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610da857610da7610f25565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610de557610de4610f25565b5b828202905092915050565b6000610dfb82610e86565b9150610e0683610e86565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3f57610e3e610f25565b5b828202905092915050565b6000610e5582610e66565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610eb182610eb8565b9050919050565b6000610ec382610eca565b9050919050565b6000610ed582610e66565b9050919050565b6000610ee782610e86565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f1a57610f19610f25565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b61101b81610e4a565b811461102657600080fd5b50565b61103281610e5c565b811461103d57600080fd5b50565b61104981610e86565b811461105457600080fd5b50565b61106081610e90565b811461106b57600080fd5b5056fea26469706673582212203f9d4711f55d78873ffcee5e23ce3c8d89b1aa31ed50aebb029dfccc9dfe968b64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630ec3b027146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610abe565b6101cf565b6040516100bf9190610c71565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610c36565b60405180910390f35b6100fb61023e565b005b34801561010957600080fd5b50610112610475565b60405161011f9190610c71565b60405180910390f35b34801561013457600080fd5b5061013d610482565b60405161014a9190610c1b565b60405180910390f35b34801561015f57600080fd5b506101686104aa565b6040516101759190610c36565b60405180910390f35b6101866104d4565b005b6101906105fd565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610aeb565b61088b565b6040516101c69190610c1b565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561036e5760008082815481106102e8576102e7610f83565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036690610edc565b9150506102c6565b50600067ffffffffffffffff81111561038a57610389610fb2565b5b6040519080825280602002602001820160405280156103b85781602001602082028036833780820191505090505b50600090805190602001906103ce9291906109ae565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103f590610c06565b60006040518083038185875af1925050503d8060008114610432576040519150601f19603f3d011682016040523d82523d6000602084013e610437565b606091505b5050905080610472576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610513600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d290919063ffffffff16565b1015610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054b90610c51565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610682576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561070557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106bb575b5050505050905060005b815181101561079057600082828151811061072d5761072c610f83565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078890610edc565b91505061070f565b50600067ffffffffffffffff8111156107ac576107ab610fb2565b5b6040519080825280602002602001820160405280156107da5781602001602082028036833780820191505090505b50600090805190602001906107f09291906109ae565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161083790610c06565b60006040518083038185875af1925050503d8060008114610874576040519150601f19603f3d011682016040523d82523d6000602084013e610879565b606091505b505090508061088757600080fd5b5050565b60008082815481106108a05761089f610f83565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108de8361090e565b90506000670de0b6b3a764000085836108f79190610df0565b6109019190610ca8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f9190610b18565b5050509150506402540be400816109a69190610cd9565b915050919050565b828054828255906000526020600020908101928215610a27579160200282015b82811115610a265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ce565b5b509050610a349190610a38565b5090565b5b80821115610a51576000816000905550600101610a39565b5090565b600081359050610a6481611012565b92915050565b600081519050610a7981611029565b92915050565b600081359050610a8e81611040565b92915050565b600081519050610aa381611040565b92915050565b600081519050610ab881611057565b92915050565b600060208284031215610ad457610ad3610fe1565b5b6000610ae284828501610a55565b91505092915050565b600060208284031215610b0157610b00610fe1565b5b6000610b0f84828501610a7f565b91505092915050565b600080600080600060a08688031215610b3457610b33610fe1565b5b6000610b4288828901610aa9565b9550506020610b5388828901610a6a565b9450506040610b6488828901610a94565b9350506060610b7588828901610a94565b9250506080610b8688828901610aa9565b9150509295509295909350565b610b9c81610e4a565b82525050565b610bab81610ea6565b82525050565b6000610bbe600083610c8c565b9150610bc982610fe6565b600082019050919050565b6000610be1601383610c97565b9150610bec82610fe9565b602082019050919050565b610c0081610e86565b82525050565b6000610c1182610bb1565b9150819050919050565b6000602082019050610c306000830184610b93565b92915050565b6000602082019050610c4b6000830184610ba2565b92915050565b60006020820190508181036000830152610c6a81610bd4565b9050919050565b6000602082019050610c866000830184610bf7565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cb382610e86565b9150610cbe83610e86565b925082610cce57610ccd610f54565b5b828204905092915050565b6000610ce482610e5c565b9150610cef83610e5c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d2e57610d2d610f25565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d6b57610d6a610f25565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610da857610da7610f25565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610de557610de4610f25565b5b828202905092915050565b6000610dfb82610e86565b9150610e0683610e86565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3f57610e3e610f25565b5b828202905092915050565b6000610e5582610e66565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610eb182610eb8565b9050919050565b6000610ec382610eca565b9050919050565b6000610ed582610e66565b9050919050565b6000610ee782610e86565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f1a57610f19610f25565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b61101b81610e4a565b811461102657600080fd5b50565b61103281610e5c565b811461103d57600080fd5b50565b61104981610e86565b811461105457600080fd5b50565b61106081610e90565b811461106b57600080fd5b5056fea26469706673582212203f9d4711f55d78873ffcee5e23ce3c8d89b1aa31ed50aebb029dfccc9dfe968b64736f6c63430008070033",
  "devdoc": {
    "author": "author name",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This contract funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}