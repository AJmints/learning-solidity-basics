{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n// Pragma\r\npragma solidity ^0.8.7;\r\n\r\n// Imports\r\nimport './PriceConverter.sol';\r\n\r\n// Errors\r\n/* Convention for error throwing is ContractName__ErrorName  */\r\nerror FundMe__NotOwner(); \r\nerror FundMe__CallFailed();\r\n\r\n// Interfaces\r\n\r\n// Libraries\r\n\r\n/* NatSpec setup - Look up if unsure, also check Doxygen. Comment setup is as seen below. View Learning.txt in this folder to see how to use solc to generate our docs */\r\n/** @title A contract for crowd funding\r\n *  @author author name\r\n *  @notice This contract is to demo a sample funding contract\r\n *  @dev This implements price feeds as our library\r\n */\r\n\r\n// Contracts\r\ncontract FundMe {\r\n    // Type Declarations\r\n    using PriceConverter for uint256;\r\n\r\n    // State Variables\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\r\n    address[] private s_funders;\r\n    mapping(address => uint256) private s_addressToAmountFunded;\r\n    address private immutable i_owner;\r\n    /* Updated constructor, added this new variable, and refactored PriceConverter to adapt to any chain we are on */\r\n    /* This variable uses the AggregatorV3Interface to make our contract variable and modularized for the chain we are connected to */\r\n    AggregatorV3Interface public s_priceFeed;\r\n\r\n    // Events - None on this contract\r\n\r\n    // Modifiers\r\n    modifier onlyOwner {\r\n        if (msg.sender != i_owner) { revert FundMe__NotOwner(); }\r\n        _;\r\n    }\r\n\r\n    // Functions\r\n    // Function Order:\r\n    // Constructor\r\n    // Receive\r\n    // Fallback\r\n    // External\r\n    // Public \r\n    // Internal\r\n    // Private\r\n    // view / pure\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    // You can leave natspec notes over functions and various parts of your contract to inform others if anything needs clarification. \r\n    /** \r\n     * @notice This contract funds this contract\r\n     */\r\n    function fund() public payable{\r\n        // require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \"Didn't send enough!\");\r\n        s_funders.push(msg.sender);\r\n        s_addressToAmountFunded[msg.sender] = msg.value; \r\n    }\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) { \r\n            address funder = s_funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        if (!callSuccess) { revert FundMe__CallFailed(); }\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwner {\r\n        address[] memory funders = s_funders;\r\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) { \r\n            address funder = funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    } \r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n    \r\n\r\n    // Getters\r\n\r\n    function getOwner() public view returns(address) {\r\n        return i_owner;\r\n    }\r\n    \r\n    function getFunder(uint256 index) public view returns(address) {\r\n        return s_funders[index];\r\n    }\r\n    \r\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256) {\r\n            return s_addressToAmountFunded[fundingAddress];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return s_priceFeed;\r\n    }\r\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n        (,int256 price,,,) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n    \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}