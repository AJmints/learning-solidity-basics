{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8f7a32bd71e10f60dad4c807547323d87df1d407f91f54d89442fd588c54ab63",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "743197",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe8a03e180143cc7e67390db395d06b958be839729ddd487f0a6acba5996cde46",
    "transactionHash": "0x8f7a32bd71e10f60dad4c807547323d87df1d407f91f54d89442fd588c54ab63",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "743197",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "419f20beaafb41232b4fcdc196b41894",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"author name\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This contract funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Pragma\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// Imports\\r\\nimport './PriceConverter.sol';\\r\\n\\r\\n// Errors\\r\\n/* Convention for error throwing is ContractName__ErrorName  */\\r\\nerror FundMe__NotOwner(); \\r\\nerror FundMe__CallFailed();\\r\\n\\r\\n// Interfaces\\r\\n\\r\\n// Libraries\\r\\n\\r\\n/* NatSpec setup - Look up if unsure, also check Doxygen. Comment setup is as seen below. View Learning.txt in this folder to see how to use solc to generate our docs */\\r\\n/** @title A contract for crowd funding\\r\\n *  @author author name\\r\\n *  @notice This contract is to demo a sample funding contract\\r\\n *  @dev This implements price feeds as our library\\r\\n */\\r\\n\\r\\n// Contracts\\r\\ncontract FundMe {\\r\\n    // Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    // State Variables\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    address private immutable i_owner;\\r\\n    /* Updated constructor, added this new variable, and refactored PriceConverter to adapt to any chain we are on */\\r\\n    /* This variable uses the AggregatorV3Interface to make our contract variable and modularized for the chain we are connected to */\\r\\n    AggregatorV3Interface public s_priceFeed;\\r\\n\\r\\n    // Events - None on this contract\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner {\\r\\n        if (msg.sender != i_owner) { revert FundMe__NotOwner(); }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Functions\\r\\n    // Function Order:\\r\\n    // Constructor\\r\\n    // Receive\\r\\n    // Fallback\\r\\n    // External\\r\\n    // Public \\r\\n    // Internal\\r\\n    // Private\\r\\n    // view / pure\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    // You can leave natspec notes over functions and various parts of your contract to inform others if anything needs clarification. \\r\\n    /** \\r\\n     * @notice This contract funds this contract\\r\\n     */\\r\\n    function fund() public payable{\\r\\n        // require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"Didn't send enough!\\\");\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] = msg.value; \\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) { \\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!callSuccess) { revert FundMe__CallFailed(); }\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) { \\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    } \\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n    \\r\\n\\r\\n    // Getters\\r\\n\\r\\n    function getOwner() public view returns(address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n    \\r\\n    function getFunder(uint256 index) public view returns(address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n    \\r\\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256) {\\r\\n            return s_addressToAmountFunded[fundingAddress];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0f0aa48b7b22ef30d42cce25363bf9e3f49b5958370beac9397b83369b4f927f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\r\\n\\r\\nlibrary PriceConverter {\\r\\n\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n    \\r\\n}\",\"keccak256\":\"0x8898dc03b061b7dcf460343f8468f3d0032e8a71290c005d7ddb72425a5ea427\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610d7d380380610d7d833981810160405281019061003291906100c5565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b6000815190506100bf81610129565b92915050565b6000602082840312156100db576100da610124565b5b60006100e9848285016100b0565b91505092915050565b60006100fd82610104565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610132816100f2565b811461013d57600080fd5b50565b60805160601c610c0a610173600039600081816103010152818161054701528181610597015261078d0152610c0a6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c5919061093b565b610290565b6040516100d79190610a30565b60405180910390f35b3480156100ec57600080fd5b506100f56102d9565b6040516101029190610a15565b60405180910390f35b6101136102ff565b005b34801561012157600080fd5b5061012a610536565b6040516101379190610a30565b60405180910390f35b34801561014c57600080fd5b50610155610543565b60405161016291906109fa565b60405180910390f35b34801561017757600080fd5b5061018061056b565b60405161018d9190610a15565b60405180910390f35b61019e6101e7565b005b6101a8610595565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610968565b610823565b6040516101de91906109fa565b60405180910390f35b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610384576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561042f5760008082815481106103a9576103a8610b40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042790610ac8565b915050610387565b50600067ffffffffffffffff81111561044b5761044a610b6f565b5b6040519080825280602002602001820160405280156104795781602001602082028036833780820191505090505b506000908051906020019061048f92919061086a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104b6906109e5565b60006040518083038185875af1925050503d80600081146104f3576040519150601f19603f3d011682016040523d82523d6000602084013e6104f8565b606091505b5050905080610533576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561069d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610653575b5050505050905060005b81518110156107285760008282815181106106c5576106c4610b40565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061072090610ac8565b9150506106a7565b50600067ffffffffffffffff81111561074457610743610b6f565b5b6040519080825280602002602001820160405280156107725781602001602082028036833780820191505090505b506000908051906020019061078892919061086a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107cf906109e5565b60006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b505090508061081f57600080fd5b5050565b600080828154811061083857610837610b40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8280548282559060005260206000209081019282156108e3579160200282015b828111156108e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061088a565b5b5090506108f091906108f4565b5090565b5b8082111561090d5760008160009055506001016108f5565b5090565b60008135905061092081610ba6565b92915050565b60008135905061093581610bbd565b92915050565b60006020828403121561095157610950610b9e565b5b600061095f84828501610911565b91505092915050565b60006020828403121561097e5761097d610b9e565b5b600061098c84828501610926565b91505092915050565b61099e81610a56565b82525050565b6109ad81610a92565b82525050565b60006109c0600083610a4b565b91506109cb82610ba3565b600082019050919050565b6109df81610a88565b82525050565b60006109f0826109b3565b9150819050919050565b6000602082019050610a0f6000830184610995565b92915050565b6000602082019050610a2a60008301846109a4565b92915050565b6000602082019050610a4560008301846109d6565b92915050565b600081905092915050565b6000610a6182610a68565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a9d82610aa4565b9050919050565b6000610aaf82610ab6565b9050919050565b6000610ac182610a68565b9050919050565b6000610ad382610a88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0657610b05610b11565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b610baf81610a56565b8114610bba57600080fd5b50565b610bc681610a88565b8114610bd157600080fd5b5056fea264697066735822122003fb65fa47d37b53b66c3387fa7462b5d9a273b3e403e8f479c86229d2e5cf7864736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c5919061093b565b610290565b6040516100d79190610a30565b60405180910390f35b3480156100ec57600080fd5b506100f56102d9565b6040516101029190610a15565b60405180910390f35b6101136102ff565b005b34801561012157600080fd5b5061012a610536565b6040516101379190610a30565b60405180910390f35b34801561014c57600080fd5b50610155610543565b60405161016291906109fa565b60405180910390f35b34801561017757600080fd5b5061018061056b565b60405161018d9190610a15565b60405180910390f35b61019e6101e7565b005b6101a8610595565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610968565b610823565b6040516101de91906109fa565b60405180910390f35b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610384576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561042f5760008082815481106103a9576103a8610b40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042790610ac8565b915050610387565b50600067ffffffffffffffff81111561044b5761044a610b6f565b5b6040519080825280602002602001820160405280156104795781602001602082028036833780820191505090505b506000908051906020019061048f92919061086a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104b6906109e5565b60006040518083038185875af1925050503d80600081146104f3576040519150601f19603f3d011682016040523d82523d6000602084013e6104f8565b606091505b5050905080610533576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561069d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610653575b5050505050905060005b81518110156107285760008282815181106106c5576106c4610b40565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061072090610ac8565b9150506106a7565b50600067ffffffffffffffff81111561074457610743610b6f565b5b6040519080825280602002602001820160405280156107725781602001602082028036833780820191505090505b506000908051906020019061078892919061086a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107cf906109e5565b60006040518083038185875af1925050503d806000811461080c576040519150601f19603f3d011682016040523d82523d6000602084013e610811565b606091505b505090508061081f57600080fd5b5050565b600080828154811061083857610837610b40565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8280548282559060005260206000209081019282156108e3579160200282015b828111156108e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061088a565b5b5090506108f091906108f4565b5090565b5b8082111561090d5760008160009055506001016108f5565b5090565b60008135905061092081610ba6565b92915050565b60008135905061093581610bbd565b92915050565b60006020828403121561095157610950610b9e565b5b600061095f84828501610911565b91505092915050565b60006020828403121561097e5761097d610b9e565b5b600061098c84828501610926565b91505092915050565b61099e81610a56565b82525050565b6109ad81610a92565b82525050565b60006109c0600083610a4b565b91506109cb82610ba3565b600082019050919050565b6109df81610a88565b82525050565b60006109f0826109b3565b9150819050919050565b6000602082019050610a0f6000830184610995565b92915050565b6000602082019050610a2a60008301846109a4565b92915050565b6000602082019050610a4560008301846109d6565b92915050565b600081905092915050565b6000610a6182610a68565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610a9d82610aa4565b9050919050565b6000610aaf82610ab6565b9050919050565b6000610ac182610a68565b9050919050565b6000610ad382610a88565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0657610b05610b11565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b610baf81610a56565b8114610bba57600080fd5b50565b610bc681610a88565b8114610bd157600080fd5b5056fea264697066735822122003fb65fa47d37b53b66c3387fa7462b5d9a273b3e403e8f479c86229d2e5cf7864736f6c63430008070033",
  "devdoc": {
    "author": "author name",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This contract funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}